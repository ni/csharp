<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- TODO: This location of 'content' needs to get updated once we build our package if we decide to put the files elsewhere, outside of a 'content' directory -->
    <NI_CodeAnalysisRuleSetDirectory>$(PkgNI_DotNet_Analyzers)\content</NI_CodeAnalysisRuleSetDirectory>
  </PropertyGroup>

  <PropertyGroup>
    <!-- this would more correctly be: assemblyname contains .Test. We have an issue with test utilities projects, and test.testutilities projects. -->
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.StartsWith("Tests."))</NI_IsTestProject>
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.EndsWith(".Tests"))</NI_IsTestProject>
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.StartsWith("!Tests."))</NI_IsTestProject>
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True'">$(MSBuildProjectName.StartsWith("TestUtilities."))</NI_IsTestUtilitiesProject>
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True'">$(MSBuildProjectName.StartsWith("!TestUtilities."))</NI_IsTestUtilitiesProject>
    <!-- The following is needed for misnamed TestUtilities that contain xaml because the generated project for the second compile appends random characters to the end of the project name -->
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True' and '$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.Contains(".TestUtilities"))</NI_IsTestUtilitiesProject>

    <CodeAnalysisRuleSet>$(NI_CodeAnalysisRuleSetDirectory)\NI.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition="'$(NI_IsTestProjectCondition)' == 'True'">$(NI_CodeAnalysisRuleSetDirectory)\NI.Tests.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition="'$(NI_IsTestUtilitiesProjectCondition)' == 'True'">$(NI_CodeAnalysisRuleSetDirectory)\NI.TestUtilities.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Enable analyzers if they haven't been explicitly disabled, we're using Roslyn for CA/SA, the code needs to be validated -->
    <NI_EnableAnalyzers Condition="'$(NI_EnableAnalyzers)' == ''">True</NI_EnableAnalyzers>
  </PropertyGroup>

  <PropertyGroup>
    <NI1006_BannedMethods>$(SolutionDir)\BannedMethods.xml</NI1006_BannedMethods>

    <!-- TODO: Determine whether we want to use the solution directory, the project directory, or both?-->
    <NI1704_GlobalExceptions>$(SolutionDir)\CodeAnalysisDictionary.xml</NI1704_GlobalExceptions>

    <!--AdditionalSpellingDictionary.dic contains the differences in words between the hunspell and Microsoft dictionaries-->
    <NI1704_AdditionalSpellingDictionary>$(NI_CodeAnalysisRuleSetDirectory)\NI1704_AdditionalSpellingDictionary.dic</NI1704_AdditionalSpellingDictionary>
  </PropertyGroup>

  <ItemGroup Condition="'$(NI_EnableAnalyzers)' == 'True'">
    <!-- Microsoft's SA analyzers -->
    <Analyzer Include="$(PkgStyleCop_Analyzers)\analyzers\dotnet\cs\StyleCop.Analyzers.dll"/>
    <Analyzer Include="$(PkgStyleCop_Analyzers)\analyzers\dotnet\cs\StyleCop.Analyzers.CodeFixes.dll"/>

    <RoslynAnalyzer Include="Microsoft.CodeQuality" />
    <RoslynAnalyzer Include="Microsoft.NetCore" />
    <RoslynAnalyzer Include="Microsoft.NetFramework" />
    <RoslynAnalyzer Include="Text" />

    <!-- Microsoft's CA analyzers -->
    <Analyzer Include="@(RoslynAnalyzer->'$(NuGetPackageRoot)\%(Identity).analyzers\2.6.3\analyzers\dotnet\cs\%(Identity).Analyzers.dll')"/>
    <Analyzer Include="@(RoslynAnalyzer->'$(NuGetPackageRoot)\%(Identity).analyzers\2.6.3\analyzers\dotnet\cs\%(Identity).CSharp.Analyzers.dll')"/>
    <Analyzer Include="$(PkgMicrosoft_VisualStudio_Threading_Analyzers)\analyzers\cs\Microsoft.VisualStudio.Threading.Analyzers.dll"/>
    <Analyzer Include="$(PkgMicrosoft_CodeQuality_Analyzers)\analyzers\dotnet\cs\Humanizer.dll" />

    <!-- NI's CA analyzers -->
    <Analyzer Include="$(NuGetPackageRoot)\ni.codeanalysis.analyzers\1.0.2\lib\netstandard1.3\NI.CodeAnalysis.Analyzers.dll"/>
    <Analyzer Include="$(NuGetPackageRoot)\ni.codeanalysis.analyzers\1.0.2\lib\netstandard1.3\Utilities.dll"/>
    <Analyzer Include="$(NuGetPackageRoot)\ni.codequality.analyzers\1.0.2\lib\netstandard1.3\NI.CodeQuality.Analyzers.dll"/>
    <Analyzer Include="$(NuGetPackageRoot)\ni.codequality.analyzers\1.0.2\lib\netstandard1.3\Utilities.dll"/>
    <Analyzer Include="$(NuGetPackageRoot)\nationalinstruments.tools.analyzers.naming\1.0.2\lib\netstandard1.3\NationalInstruments.Tools.Analyzers.Naming.dll"/>
    <Analyzer Include="$(NuGetPackageRoot)\nationalinstruments.tools.analyzers.naming\1.0.2\lib\netstandard1.3\NationalInstruments.Tools.Analyzers.Utilities.dll"/>

    <!-- Configuration files for our analyzers -->
    <!-- By adding the Link attribute, these files will not be shown in the Solution Explorer for .NET Core projects. -->
    <AdditionalFiles Include="$(NI1006_BannedMethods)" Condition="Exists('$(NI1006_BannedMethods)')">
      <Link>$(NI1006_BannedMethods)</Link>
    </AdditionalFiles>
    <AdditionalFiles Include="$(NI1704_AdditionalSpellingDictionary)" Condition="Exists('$(NI1704_AdditionalSpellingDictionary)')">
      <Link>$(CodeAnalysisRuleSet)</Link>
    </AdditionalFiles>
    <AdditionalFiles Include="$(CodeAnalysisRuleSet)" Condition="Exists('$(CodeAnalysisRuleSet)')">
     <Link>$(CodeAnalysisRuleSet)</Link>
    </AdditionalFiles>

    <AdditionalFiles Include="$(NI1704_GlobalExceptions)" Condition="Exists('$(NI1704_GlobalExceptions)')">
      <Link>$(NI1704_GlobalExceptions)</Link>
    </AdditionalFiles>
  </ItemGroup>

  <!-- By default, the NI.ruleset reports violations as warnings instead of errors. 
       Set TreatWarningsAsErrors to true in release to generate errors. -->
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
  </PropertyGroup>

  <!-- Disable portions of Roslyn analyzers that would otherwise generate errors in our build. There should be a goal
       around removing as many of these as possible, but we want to report warnings and elevate warnings as errors in
       our release builds rather than erroring all the time on everything. -->
  <ItemGroup>
    <RoslynTransition_DisabledRule Include="0419" />
    <RoslynTransition_DisabledRule Include="1574" />
    <RoslynTransition_DisabledRule Include="1580" />
    <RoslynTransition_DisabledRule Include="1587" />
    <RoslynTransition_DisabledRule Include="1589" />
    <RoslynTransition_DisabledRule Include="1658" />
    <RoslynTransition_DisabledRule Include="1712" />
    <RoslynTransition_DisabledRule Include="1998" />
  </ItemGroup>
  <PropertyGroup>
    <TemporaryWarningsNotAsErrors Condition="'$(TemporaryWarningsNotAsErrors)' == ''"></TemporaryWarningsNotAsErrors>
    <WarningsNotAsErrors>$(WarningsNotAsErrors),@(RoslynTransition_DisabledRule),$(TemporaryWarningsNotAsErrors)</WarningsNotAsErrors>
    <NoWarn>$(NoWarn),@(RoslynTransition_DisabledRule)</NoWarn>
  </PropertyGroup>
</Project>
